{"version":3,"file":"input.js","mappings":"+GAAA,eA2DMA,EAAyC,CAACC,EAAaC,EAAW,CAAC,KACvE,IAAIC,EAEJ,MAAO,UACgB,IAAVA,EACTA,EAAQC,MAAMC,2BAA2BJ,EAAaK,OAAOC,OAAO,CAClEC,WAAW,EACXC,aAAa,EACbC,iBAAiB,GAChBR,IAEHC,EAAMQ,M,CAET,EAGGC,EAAqC,CAACC,EAAOC,EAAOC,EAAaC,EAAUC,KACxE,CACLJ,QACAK,KAAM,CACJC,KAAM,QACNL,SAEFM,QAAS,CACP,CACED,KAAM,SACNE,KAAM,SACNC,KAAMlB,MAAMmB,EAAE,UAAW,WAE3B,CACEJ,KAAM,SACNE,KAAM,SACNC,KAAMlB,MAAMmB,EAAE,UAAW,QACzBC,WAAY,YAGhBT,cACAC,WACAC,aA2RoB,EAAAQ,aAvRxB,MAGEC,YAA8BC,GAAA,KAAAA,UAAAA,EAC5B,MAAMzB,EAAW0B,KAAKD,UAChBE,EAAUvB,OAAOC,OACrB,CACEuB,KAAM,QACNC,QAAS,mCACTC,aAAa,EAGbC,SAAS,EACTC,WAAW,EACXC,QAAS,wGAGTC,4BAA4B,EAC5BC,eAAgB,OAChBC,mBAAmB,EAGnBC,eAAe,EACfC,oBAAoB,EACpBC,YAAY,EACZC,eAAe,EAGfC,yBAA0B,GAE5Bf,KAAKD,UAAUiB,aACf,CACEC,SAAU,IAAIjB,KAAKD,UAAUmB,KAC7BC,SAAUnB,KAAKD,UAAUoB,SACzBC,eAAgBpB,KAAKD,UAAUsB,UAE/BC,MAAQC,IACNvB,KAAKuB,OAASA,EACdvB,KAAKwB,QAAQ,EAGfC,uBAAyBF,IACvBvB,KAAKuB,OAASA,EACdvB,KAAK0B,QAEL,MAAMC,EAAarD,EAAS0C,aAAaS,uBACf,mBAAfE,GACTA,EAAWC,MAAM5B,KAAM6B,U,IAM/BC,QAAQC,KAAK9B,GAAS+B,MAAK,SAAU,QACvC,CAEQC,8BAA+B5D,G,MACrC,OAAoC,QAA7B,EAAAA,EAAY6D,MAAM,MAAMC,aAAK,eAAEC,aACxC,CAEQZ,SACN,MAAMa,EAAwB,CAAC,CAC7B9C,KAAM,WACNG,KAAMlB,MAAMmB,EAAE,UAAW,oBACzB2C,SAAU,IAAMtC,KAAKuB,OAAOgB,YAAY,aAG1C,IAAK,MAAM,YAAElE,EAAW,YAAEmE,EAAW,QAAEC,KAAazC,KAAKD,UAAUsC,YAAa,CAC9E,MAAMK,EAAoB1C,KAAKiC,8BAA8B5D,GAEvDsE,EAAYvE,EAAiBC,EAAa,CAC9CoE,UACAG,SAAU,CAAEC,OAAQ7C,KAAKD,UAAU8C,QACnCC,SAAU,EAAEC,MACV,MAAMC,EAAkBhD,KAAKuB,OAAO0B,UAAUC,aAC9ClD,KAAKuB,OAAO4B,cAAcC,KAAKpD,KAAKqD,kBAAkBb,EAAa,CACjEc,IAAK,GAAGP,EAAQO,OAAOZ,KAAqBK,EAAQ7B,MAAMlB,KAAKD,UAAUwD,gBAEzE7D,KAAMsD,EAAgBQ,OAAS,EAAIR,EAAkBS,OAAOV,EAAQW,OACpEC,KAAM3D,KAAKD,UAAUwD,gBACpB,IAIPlB,EAAYuB,KAAK,CACfrE,KAAM,WACNG,KAAM8C,EACNF,SAAU,IAAMK,K,CAIpB3C,KAAKuB,OAAOsC,GAAGC,SAASC,cAAc,aAAc,CAClDC,KAAM,OACNC,QAASzF,MAAMmB,EAAE,UAAW,QAC5BuE,MAAQC,GAAaA,EAAS9B,KAIhC,MAAM+B,EAAmB5F,MAAMmB,EAAE,UAAW,mBAC5CK,KAAKuB,OAAOsC,GAAGC,SAASO,UAAU,cAAe,CAC/CL,KAAM,QACNC,QAASG,EACT9B,SAAU,IAAMlE,EAAiB,yBAA0B,CACzDqE,QAASzC,KAAKD,UAAUuE,QACxBC,WAAYvE,KAAKD,UAAUwE,WAAWC,KAAKC,IAClC,CACLC,OAAQD,EAAUE,MAClBlF,KAAMgF,EAAU/E,SAGpBkF,WAAY,gCACZhC,SAAU,CACRC,OAAQ7C,KAAKD,UAAU8C,OACvBgC,KAAM,SAER/B,SAAU,EAAEC,GAAqB0B,EAAyB,QACxD,MAAMzB,EAAkBhD,KAAKuB,OAAO0B,UAAUC,aACxCqB,EAAa,CAAC,CAClBI,MAAO,GACPjF,KAAMlB,MAAMmB,EAAE,UAAW,kBAE3B4E,EAAWX,QAAQ5D,KAAKD,UAAUwE,YAElCvE,KAAKuB,OAAO4B,cAAcC,KAAKpE,EAC7BoF,EACA,CACE,CACE7E,KAAM,QACNE,KAAM,QACNiE,MAAOlF,MAAMmB,EAAE,UAAW,UAE5B,CACEJ,KAAM,QACNE,KAAM,UACNiE,MAAOlF,MAAMmB,EAAE,UAAW,YAE5B,CACEJ,KAAM,QACNE,KAAM,OACNiE,MAAOlF,MAAMmB,EAAE,UAAW,SAE5B,CACEJ,KAAM,WACNE,KAAM,SACNiE,MAAOlF,MAAMmB,EAAE,UAAW,qBAE5B,CACEJ,KAAM,YACNE,KAAM,YACNiE,MAAOlF,MAAMmB,EAAE,UAAW,aAC1BT,MAAOqF,IAGX,CACEE,UAAWA,QAAAA,EAAazE,KAAKD,UAAU+E,mBAEzC,SACCC,IACC,MAAMC,EAAOD,EAAIE,UACXC,EAAUlC,EAAgBQ,OAAS,EAAI,oBAAsB,mBAC7D2B,EAAWH,EAAK/F,MAAMuE,OAAS,EAC/B4B,EAAaJ,EAAKK,QAAQ7B,OAAS,EACnC8B,EAAUN,EAAKO,KAAK/B,OAAS,EAC7BgC,EAAkC,KAAnBR,EAAKP,UAEpBnB,EAAM,CACVkC,EAAezC,EAAQO,IAAImC,QAAQ,aAAc,KAAKT,EAAKP,gBAAkB1B,EAAQO,IACrF,UAAUP,EAAQ7B,KAClBsE,EAAe,cAAcR,EAAKP,YAAc,IAChDiB,KAAK,IACDC,EAAU,CACd,WACAL,EAAU,YAAYN,EAAKO,QAAQP,EAAKY,OAAS,mBAAqB,MAAQ,GAC9E,aAAatC,KAAO6B,EAAW,QAAQH,EAAK/F,SAAW,MACvDqG,EAAU,OAAS,GACnBF,EAAa,eAAeJ,EAAKK,uBAAyB,IAC1DK,KAAK,IAEP1F,KAAKuB,OAAOgB,YAAY2C,GAAS,EAAOS,GACxCZ,EAAIc,OAAO,IAEb,GA/EUzH,IAmFpB,CAEQsD,QACN,MAAMoE,EAAWC,EAAE/F,KAAKuB,OAAOyE,WACzBC,EAAQF,EAAE/F,KAAKuB,OAAO2E,aAE5BlG,KAAKuB,OAAO4E,GAAG,SAAUC,GAAwBN,EAASO,SAAS,iBACnErG,KAAKuB,OAAO4E,GAAG,QAASC,GAAwBN,EAASQ,YAAY,iBAGrE,MAAMC,EAA+BN,EAAMjB,KAAK,iBACxB,IAAIwB,OAAOC,kBAAiB,KAClDV,EAAE/F,KAAKuB,OAAOmF,WAAWC,IAAI3G,KAAKuB,OAAO2B,eACzBqD,EAAcK,WAAaC,QAAQC,KAAOb,GAClDc,QAAQ,SAAS,IAEXC,QAAQhH,KAAKuB,OAAO0F,UAAW,CAC7CC,eAAe,EACfC,WAAW,EACXC,SAAS,IAIXpH,KAAKuB,OAAO8F,YACV,SACA,IACA,IAAMR,QAAQS,eAAeC,gBAAgB,IAAIC,cAAc,UAAW,CACxEC,UAAU,EACVC,SAAS,EACTC,SAAS,EACTC,QAAQ,EACRC,QAAShB,QAAQiB,WAGrB9H,KAAKuB,OAAO8F,YACV,eACA,IACA,IAAMR,QAAQS,eAAeC,gBAAgB,IAAIC,cAAc,UAAW,CACxEC,UAAU,EACVC,SAAS,EACTC,SAAS,EACTC,QAAQ,EACRC,QAAShB,QAAQiB,UAGvB,CAEQzE,kBAAmBpE,EAAeE,GACxC,MAAM6D,EAAkBhD,KAAKuB,OAAO0B,UAAUC,aAC9C,OAAOlE,EACLC,EACA,CACE,CACEM,KAAM,QACNE,KAAM,MACNiE,MAAOlF,MAAMmB,EAAE,UAAW,OAC1BoI,SAAS,GAEX,CACExI,KAAM,QACNE,KAAM,OACNiE,MAAOlF,MAAMmB,EAAE,UAAW,SAE5B,CACEJ,KAAM,WACNE,KAAM,SACNiE,MAAOlF,MAAMmB,EAAE,UAAW,qBAE5B,CACEJ,KAAM,YACNE,KAAM,OACNiE,MAAOlF,MAAMmB,EAAE,UAAW,QAC1BT,MAAOc,KAAKD,UAAUiI,WAG1B7I,GACC4F,IACC,MAAMC,EAAOD,EAAIE,UACjBF,EAAIkD,QAAQ,CACV3E,IAAK0B,EAAK1B,IAAImC,QAAQ,WAAY,IAAIT,EAAKrB,SAC3C,IAEHoB,IACC,MAAMC,EAAOD,EAAIE,UACXC,EAAUlC,EAAgBQ,OAAS,EAAI,oBAAsB,mBAC7D0E,EAAa,YAAYlD,EAAK1B,eAAe0B,EAAKtF,QAAQsF,EAAKY,OAAS,mBAAqB,MAAMZ,EAAKtF,WAE9GM,KAAKuB,OAAOgB,YAAY2C,GAAS,EAAOgD,GACxCnD,EAAIc,OAAO,GAGjB,E,UCzXFsC,EAAOC,QAAUC,M,GCCbC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,MCtBA,eAQA5B,OAAOoC,YAAetK,GAAa,IAAI,EAAAuB,aAAavB,E","sources":["webpack://craft-tinymce/./client/src/scripts/TinyMCEField.ts","webpack://craft-tinymce/external var \"jQuery\"","webpack://craft-tinymce/webpack/bootstrap","webpack://craft-tinymce/./client/src/scripts/main.ts"],"sourcesContent":["import * as $ from 'jquery'\nimport { Editor, EditorEvent, RawEditorOptions, TinyMCE } from 'tinymce'\n\ndeclare const tinymce: TinyMCE\n\ninterface Option {\n  elementType: string\n  optionTitle: string\n  sources: string[]\n}\n\ninterface FieldSettings {\n  allSites: Array<{\n    value: string\n    text: string\n  }>\n  defaultTransform: string\n  direction: string\n  editorConfig: RawEditorOptions\n  elementSiteId: string\n  id: string\n  language: string\n  linkOptions: Option[]\n  locale: string\n  transforms: Array<{\n    value: string\n    text: string\n  }>\n  volumes: string[]\n}\n\ninterface ElementEditor {\n  isFullPage: boolean\n}\n\ninterface Element {\n  id: string\n  label: string\n  url: string\n}\n\ninterface LinkDialogData {\n  url: string\n  text: string\n  newTab: boolean\n  site: string\n}\n\ninterface AssetDialogData {\n  title: string\n  caption: string\n  link: string\n  newTab: boolean\n  transform: string\n}\n\ntype ShowModalFactoryType = (elementType: string, settings: object) => Function\ntype DialogConfigFunction = (title: string, items: object[], initialData: object, onChange: Function, onSubmit: Function) => any\n\nconst showModalFactory: ShowModalFactoryType = (elementType, settings = {}) => {\n  let modal: GarnishModal|undefined\n\n  return () => {\n    if (typeof modal === 'undefined') {\n      modal = Craft.createElementSelectorModal(elementType, Object.assign({\n        resizable: true,\n        multiSelect: false,\n        disableOnSelect: true\n      }, settings))\n    } else {\n      modal.show()\n    }\n  }\n}\n\nconst dialogConfig: DialogConfigFunction = (title, items, initialData, onChange, onSubmit) => {\n  return {\n    title,\n    body: {\n      type: 'panel',\n      items\n    },\n    buttons: [\n      {\n        type: 'cancel',\n        name: 'cancel',\n        text: Craft.t('tinymce', 'Cancel')\n      },\n      {\n        type: 'submit',\n        name: 'submit',\n        text: Craft.t('tinymce', 'Save'),\n        buttonType: 'primary'\n      }\n    ],\n    initialData,\n    onChange,\n    onSubmit\n  }\n}\n\nclass TinyMCEField {\n  public editor: Editor\n\n  constructor (private readonly _settings: FieldSettings) {\n    const settings = this._settings\n    const options = Object.assign(\n      {\n        skin: 'craft',\n        plugins: 'autoresize lists link image code',\n        content_css: false,\n\n        // Toolbars\n        menubar: false,\n        statusbar: false,\n        toolbar: 'undo redo | blocks | bold italic strikethrough | bullist numlist | insertLink insertImage | hr | code',\n\n        // Formatting\n        allow_conditional_comments: false,\n        element_format: 'html',\n        fix_list_elements: true,\n\n        // Links\n        relative_urls: false,\n        remove_script_host: false,\n        anchor_top: false,\n        anchor_bottom: false,\n\n        // Auto-resize\n        autoresize_bottom_margin: 0\n      },\n      this._settings.editorConfig,\n      {\n        selector: `#${this._settings.id}`,\n        language: this._settings.language,\n        directionality: this._settings.direction,\n\n        setup: (editor: Editor) => {\n          this.editor = editor\n          this._setup()\n        },\n\n        init_instance_callback: (editor: Editor) => {\n          this.editor = editor\n          this._init()\n\n          const configInit = settings.editorConfig.init_instance_callback\n          if (typeof configInit === 'function') {\n            configInit.apply(this, arguments)\n          }\n        }\n      }\n    )\n\n    tinymce.init(options).then(() => {}, () => {})\n  }\n\n  private _commandHandleFromElementType (elementType: string): string {\n    return elementType.split('\\\\').pop()?.toLowerCase() as string\n  }\n\n  private _setup (): void {\n    const linkOptions: object[] = [{\n      type: 'menuitem',\n      text: Craft.t('tinymce', 'Insert/edit link'),\n      onAction: () => this.editor.execCommand('mceLink')\n    }]\n\n    for (const { elementType, optionTitle, sources } of this._settings.linkOptions) {\n      const elementTypeHandle = this._commandHandleFromElementType(elementType)\n\n      const showModal = showModalFactory(elementType, {\n        sources,\n        criteria: { locale: this._settings.locale },\n        onSelect: ([element]: [Element]) => {\n          const selectedContent = this.editor.selection.getContent()\n          this.editor.windowManager.open(this._linkDialogConfig(optionTitle, {\n            url: `${element.url}#${elementTypeHandle}:${element.id}@${this._settings.elementSiteId}`,\n            // Doing `String(element.label)` in case the element title was a number\n            text: selectedContent.length > 0 ? selectedContent : String(element.label),\n            site: this._settings.elementSiteId\n          }))\n        }\n      })\n\n      linkOptions.push({\n        type: 'menuitem',\n        text: optionTitle,\n        onAction: () => showModal()\n      })\n    }\n\n    this.editor.ui.registry.addMenuButton('insertLink', {\n      icon: 'link',\n      tooltip: Craft.t('tinymce', 'Link'),\n      fetch: (callback) => callback(linkOptions)\n    })\n\n    // Image button\n    const imageButtonTitle = Craft.t('tinymce', 'Insert an image')\n    this.editor.ui.registry.addButton('insertImage', {\n      icon: 'image',\n      tooltip: imageButtonTitle,\n      onAction: () => showModalFactory('craft\\\\elements\\\\Asset', {\n        sources: this._settings.volumes,\n        transforms: this._settings.transforms.map((transform) => {\n          return {\n            handle: transform.value,\n            name: transform.text\n          }\n        }),\n        storageKey: 'RichTextFieldType.ChooseImage',\n        criteria: {\n          locale: this._settings.locale,\n          kind: 'image'\n        },\n        onSelect: ([element]: [Element], transform: string|null = null) => {\n          const selectedContent = this.editor.selection.getContent()\n          const transforms = [{\n            value: '',\n            text: Craft.t('tinymce', 'No transform')\n          }]\n          transforms.push(...this._settings.transforms)\n\n          this.editor.windowManager.open(dialogConfig(\n            imageButtonTitle,\n            [\n              {\n                type: 'input',\n                name: 'title',\n                label: Craft.t('tinymce', 'Title')\n              },\n              {\n                type: 'input',\n                name: 'caption',\n                label: Craft.t('tinymce', 'Caption')\n              },\n              {\n                type: 'input',\n                name: 'link',\n                label: Craft.t('tinymce', 'Link')\n              },\n              {\n                type: 'checkbox',\n                name: 'newTab',\n                label: Craft.t('tinymce', 'Open in new tab?')\n              },\n              {\n                type: 'selectbox',\n                name: 'transform',\n                label: Craft.t('tinymce', 'Transform'),\n                items: transforms\n              }\n            ],\n            {\n              transform: transform ?? this._settings.defaultTransform\n            },\n            () => {},\n            (api: any) => {\n              const data = api.getData() as AssetDialogData\n              const command = selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n              const hasTitle = data.title.length > 0\n              const hasCaption = data.caption.length > 0\n              const hasLink = data.link.length > 0\n              const hasTransform = data.transform !== ''\n\n              const url = [\n                hasTransform ? element.url.replace(/\\/([^/]+)$/, `/_${data.transform}/$1`) : element.url,\n                `#asset:${element.id}`,\n                hasTransform ? `:transform:${data.transform}` : ''\n              ].join('')\n              const content = [\n                '<figure>',\n                hasLink ? `<a href=\"${data.link}\"${data.newTab ? ' target=\"_blank\"' : ''}>` : '',\n                `<img src=\"${url}\"${hasTitle ? `alt=\"${data.title}\"` : ''}>`,\n                hasLink ? '</a>' : '',\n                hasCaption ? `<figcaption>${data.caption}</figcaption>` : ''\n              ].join('')\n\n              this.editor.execCommand(command, false, content)\n              api.close()\n            }\n          ))\n        }\n      })()\n    })\n  }\n\n  private _init (): void {\n    const $element = $(this.editor.container)\n    const $form = $(this.editor.formElement)\n\n    this.editor.on('focus', (_: EditorEvent<any>) => $element.addClass('mce-focused'))\n    this.editor.on('blur', (_: EditorEvent<any>) => $element.removeClass('mce-focused'))\n\n    // Update the form value on any content change, and trigger a change event so drafts can autosave\n    const elementEditor: ElementEditor = $form.data('elementEditor')\n    const contentObserver = new window.MutationObserver(() => {\n      $(this.editor.targetElm).val(this.editor.getContent())\n      const $target = elementEditor.isFullPage ? Garnish.$bod : $form\n      $target.trigger('change')\n    })\n    contentObserver.observe(this.editor.getBody(), {\n      characterData: true,\n      childList: true,\n      subtree: true\n    })\n\n    // Allow use of Craft element save shortcuts\n    this.editor.addShortcut(\n      'meta+s',\n      '',\n      () => Garnish.uiLayerManager.triggerShortcut(new KeyboardEvent('keydown', {\n        shiftKey: false,\n        metaKey: true,\n        ctrlKey: true,\n        altKey: false,\n        keyCode: Garnish.S_KEY\n      }))\n    )\n    this.editor.addShortcut(\n      'shift+meta+s',\n      '',\n      () => Garnish.uiLayerManager.triggerShortcut(new KeyboardEvent('keydown', {\n        shiftKey: true,\n        metaKey: true,\n        ctrlKey: true,\n        altKey: false,\n        keyCode: Garnish.S_KEY\n      }))\n    )\n  }\n\n  private _linkDialogConfig (title: string, initialData: object): any {\n    const selectedContent = this.editor.selection.getContent()\n    return dialogConfig(\n      title,\n      [\n        {\n          type: 'input',\n          name: 'url',\n          label: Craft.t('tinymce', 'URL'),\n          enabled: false\n        },\n        {\n          type: 'input',\n          name: 'text',\n          label: Craft.t('tinymce', 'Text')\n        },\n        {\n          type: 'checkbox',\n          name: 'newTab',\n          label: Craft.t('tinymce', 'Open in new tab?')\n        },\n        {\n          type: 'selectbox',\n          name: 'site',\n          label: Craft.t('tinymce', 'Site'),\n          items: this._settings.allSites\n        }\n      ],\n      initialData,\n      (api: any) => {\n        const data = api.getData() as LinkDialogData\n        api.setData({\n          url: data.url.replace(/@[0-9]+$/, `@${data.site}`)\n        })\n      },\n      (api: any) => {\n        const data = api.getData() as LinkDialogData\n        const command = selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n        const newContent = `<a href=\"${data.url}\" title=\"${data.text}\"${data.newTab ? ' target=\"_blank\"' : ''}>${data.text}</a>`\n\n        this.editor.execCommand(command, false, newContent)\n        api.close()\n      }\n    )\n  }\n}\n\nexport { FieldSettings, TinyMCEField }\n","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FieldSettings, TinyMCEField } from './TinyMCEField'\n\ndeclare global {\n  interface Window {\n    initTinyMCE: (settings: FieldSettings) => void\n  }\n}\n\nwindow.initTinyMCE = (settings) => new TinyMCEField(settings)\n"],"names":["showModalFactory","elementType","settings","modal","Craft","createElementSelectorModal","Object","assign","resizable","multiSelect","disableOnSelect","show","dialogConfig","title","items","initialData","onChange","onSubmit","body","type","buttons","name","text","t","buttonType","TinyMCEField","constructor","_settings","this","options","skin","plugins","content_css","menubar","statusbar","toolbar","allow_conditional_comments","element_format","fix_list_elements","relative_urls","remove_script_host","anchor_top","anchor_bottom","autoresize_bottom_margin","editorConfig","selector","id","language","directionality","direction","setup","editor","_setup","init_instance_callback","_init","configInit","apply","arguments","tinymce","init","then","_commandHandleFromElementType","split","pop","toLowerCase","linkOptions","onAction","execCommand","optionTitle","sources","elementTypeHandle","showModal","criteria","locale","onSelect","element","selectedContent","selection","getContent","windowManager","open","_linkDialogConfig","url","elementSiteId","length","String","label","site","push","ui","registry","addMenuButton","icon","tooltip","fetch","callback","imageButtonTitle","addButton","volumes","transforms","map","transform","handle","value","storageKey","kind","defaultTransform","api","data","getData","command","hasTitle","hasCaption","caption","hasLink","link","hasTransform","replace","join","content","newTab","close","$element","$","container","$form","formElement","on","_","addClass","removeClass","elementEditor","window","MutationObserver","targetElm","val","isFullPage","Garnish","$bod","trigger","observe","getBody","characterData","childList","subtree","addShortcut","uiLayerManager","triggerShortcut","KeyboardEvent","shiftKey","metaKey","ctrlKey","altKey","keyCode","S_KEY","enabled","allSites","setData","newContent","module","exports","jQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","initTinyMCE"],"sourceRoot":""}