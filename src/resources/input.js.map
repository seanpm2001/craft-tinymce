{"version":3,"file":"input.js","mappings":"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","sources":["webpack://craft-tinymce/./client/src/scripts/TinyMCEField.ts","webpack://craft-tinymce/external var \"jQuery\"","webpack://craft-tinymce/webpack/bootstrap","webpack://craft-tinymce/./client/src/scripts/main.ts"],"sourcesContent":["import * as $ from 'jquery'\nimport { Editor, EditorEvent, RawEditorOptions, TinyMCE } from 'tinymce'\n\ndeclare const tinymce: TinyMCE\n\ninterface Option {\n  elementType: string\n  optionTitle: string\n  sources: string[]\n}\n\ninterface FieldSettings {\n  direction: string\n  id: string\n  language: string\n  linkOptions: Option[]\n  locale: string\n  mediaOptions: Option[]\n  transforms: string[]\n}\n\ninterface ElementEditor {\n  isFullPage: boolean\n}\n\ninterface Element {\n  id: string\n  label: string\n  url: string\n}\n\nconst showModalFactory: (elementType: string, settings: object) => Function = (elementType, settings = {}) => {\n  let modal: GarnishModal|undefined\n\n  return () => {\n    if (typeof modal === 'undefined') {\n      modal = Craft.createElementSelectorModal(elementType, Object.assign({\n        resizable: true,\n        multiSelect: false,\n        disableOnSelect: true\n      }, settings))\n    } else {\n      modal.show()\n    }\n  }\n}\n\nclass TinyMCEField {\n  constructor (\n    private readonly _settings: FieldSettings,\n    editorConfig: RawEditorOptions = {}\n  ) {\n    console.log(this._settings)\n    const init = this._init.bind(this)\n    const setup = this._setup.bind(this)\n\n    const options = Object.assign(\n      {\n        skin: 'craft',\n        plugins: 'autoresize lists link image code',\n        content_css: false,\n\n        // Toolbars\n        menubar: false,\n        statusbar: false,\n        toolbar: 'undo redo | blocks | bold italic strikethrough | bullist numlist | insertLink insertMedia | hr | code',\n\n        // Formatting\n        allow_conditional_comments: false,\n        element_format: 'html',\n        fix_list_elements: true,\n\n        // Links\n        relative_urls: false,\n        remove_script_host: false,\n        anchor_top: false,\n        anchor_bottom: false,\n\n        // Auto-resize\n        autoresize_bottom_margin: 0\n      },\n      editorConfig,\n      {\n        selector: `#${this._settings.id}`,\n        language: this._settings.language,\n        directionality: this._settings.direction,\n\n        setup,\n\n        init_instance_callback (editor: Editor) {\n          init(editor)\n\n          const configInit = editorConfig.init_instance_callback\n          if (typeof configInit === 'function') {\n            configInit.apply(this, arguments)\n          }\n        }\n      }\n    )\n\n    tinymce.init(options).then(() => {}, () => {})\n  }\n\n  private _commandHandleFromElementType (elementType: string): string {\n    return elementType.split('\\\\')\n      .map((segment, i) => (i === 0 ? segment[0] : segment[0].toUpperCase()) + segment.slice(1).toLowerCase())\n      .join('')\n  }\n\n  private _setup (editor: Editor): void {\n    const linkOptions: object[] = [{\n      type: 'menuitem',\n      text: Craft.t('tinymce', 'Insert/edit link'),\n      onAction: () => editor.execCommand('mceLink')\n    }]\n    const mediaOptions: object[] = [{\n      type: 'menuitem',\n      text: Craft.t('tinymce', 'Insert/edit image'),\n      onAction: () => editor.execCommand('mceImage')\n    }]\n\n    for (const { elementType, optionTitle, sources } of this._settings.linkOptions) {\n      const elementTypeHandle = this._commandHandleFromElementType(elementType)\n\n      const showModal = showModalFactory(elementType, {\n        sources,\n        criteria: { locale: this._settings.locale },\n        onSelect ([element]: [Element]) {\n          const selectedContent = editor.selection.getContent()\n\n          const url = `${element.url}#${elementTypeHandle}:${element.id}`\n          const title = element.label\n          const label = (selectedContent ?? element.label)\n          const command = selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n\n          editor.execCommand(command, false, `<a href=\"${url}\" title=\"${title}\">${label}</a>`)\n        }\n      })\n\n      linkOptions.push({\n        type: 'menuitem',\n        text: optionTitle,\n        onAction: () => showModal()\n      })\n    }\n\n    editor.ui.registry.addMenuButton('insertLink', {\n      icon: 'link',\n      tooltip: Craft.t('tinymce', 'Link'),\n      fetch: (callback) => callback(linkOptions)\n    })\n\n    for (const { elementType, optionTitle, sources } of this._settings.mediaOptions) {\n      const elementTypeHandle = this._commandHandleFromElementType(elementType)\n\n      const showModal = showModalFactory(elementType, {\n        sources,\n        transforms: this._settings.transforms,\n        storageKey: 'RichTextFieldType.ChooseImage',\n        criteria: {\n          locale: this._settings.locale,\n          kind: 'image'\n        },\n        onSelect: ([element]: [Element], transform: string|null = null) => {\n          const selectedContent = editor.selection.getContent()\n\n          const url = `${element.url}#${elementTypeHandle}:${element.id}` + (transform !== null ? `:${transform}` : '')\n          const title = element.label\n          const width = ''\n          const height = ''\n          const command = selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n\n          editor.execCommand(command, false, `<img src=\"${url}\" alt=\"${title}\" width=\"${width}\" height=\"${height}\">`)\n        }\n      })\n\n      mediaOptions.push({\n        type: 'menuitem',\n        text: optionTitle,\n        onAction: () => showModal()\n      })\n    }\n\n    editor.ui.registry.addMenuButton('insertMedia', {\n      icon: 'image',\n      tooltip: Craft.t('tinymce', 'Image'),\n      fetch: (callback) => callback(mediaOptions)\n    })\n  }\n\n  private _init (editor: Editor): void {\n    const $element = $(editor.container)\n    const $form = $(editor.formElement)\n\n    editor.on('focus', (_: EditorEvent<any>) => $element.addClass('mce-focused'))\n    editor.on('blur', (_: EditorEvent<any>) => $element.removeClass('mce-focused'))\n\n    // Update the form value on any content change, and trigger a change event so drafts can autosave\n    const elementEditor: ElementEditor = $form.data('elementEditor')\n    const contentObserver = new window.MutationObserver(() => {\n      $(editor.targetElm).val(editor.getContent())\n      const $target = elementEditor.isFullPage ? Garnish.$bod : $form\n      $target.trigger('change')\n    })\n    contentObserver.observe(editor.getBody(), {\n      characterData: true,\n      childList: true,\n      subtree: true\n    })\n\n    // Allow use of Craft element save shortcuts\n    editor.addShortcut(\n      'meta+s',\n      '',\n      () => Garnish.uiLayerManager.triggerShortcut(new KeyboardEvent('keydown', {\n        shiftKey: false,\n        metaKey: true,\n        ctrlKey: true,\n        altKey: false,\n        keyCode: Garnish.S_KEY\n      }))\n    )\n    editor.addShortcut(\n      'shift+meta+s',\n      '',\n      () => Garnish.uiLayerManager.triggerShortcut(new KeyboardEvent('keydown', {\n        shiftKey: true,\n        metaKey: true,\n        ctrlKey: true,\n        altKey: false,\n        keyCode: Garnish.S_KEY\n      }))\n    )\n  }\n}\n\nexport { FieldSettings, TinyMCEField }\n","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FieldSettings, TinyMCEField } from './TinyMCEField'\n\ndeclare global {\n  interface Window {\n    initTinyMCE: (settings: FieldSettings) => void\n  }\n}\n\nwindow.initTinyMCE = (settings) => new TinyMCEField(settings)\n"],"names":["showModalFactory","elementType","settings","modal","Craft","createElementSelectorModal","Object","assign","resizable","multiSelect","disableOnSelect","show","TinyMCEField","constructor","_settings","editorConfig","console","log","this","init","_init","bind","setup","_setup","options","skin","plugins","content_css","menubar","statusbar","toolbar","allow_conditional_comments","element_format","fix_list_elements","relative_urls","remove_script_host","anchor_top","anchor_bottom","autoresize_bottom_margin","selector","id","language","directionality","direction","init_instance_callback","editor","configInit","apply","arguments","tinymce","then","_commandHandleFromElementType","split","map","segment","i","toUpperCase","slice","toLowerCase","join","linkOptions","type","text","t","onAction","execCommand","mediaOptions","optionTitle","sources","elementTypeHandle","showModal","criteria","locale","onSelect","element","selectedContent","selection","getContent","url","title","label","command","length","push","ui","registry","addMenuButton","icon","tooltip","fetch","callback","transforms","storageKey","kind","transform","$element","$","container","$form","formElement","on","_","addClass","removeClass","elementEditor","data","window","MutationObserver","targetElm","val","isFullPage","Garnish","$bod","trigger","observe","getBody","characterData","childList","subtree","addShortcut","uiLayerManager","triggerShortcut","KeyboardEvent","shiftKey","metaKey","ctrlKey","altKey","keyCode","S_KEY","module","exports","jQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","initTinyMCE"],"sourceRoot":""}