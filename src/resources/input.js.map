{"version":3,"file":"input.js","mappings":"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","sources":["webpack://craft-tinymce/./client/src/scripts/TinyMCEField.ts","webpack://craft-tinymce/external var \"jQuery\"","webpack://craft-tinymce/webpack/bootstrap","webpack://craft-tinymce/./client/src/scripts/main.ts"],"sourcesContent":["import * as $ from 'jquery'\nimport { Editor, EditorEvent, RawEditorOptions, TinyMCE } from 'tinymce'\n\ndeclare const tinymce: TinyMCE\n\ninterface Option {\n  elementType: string\n  optionTitle: string\n  sources: string[]\n}\n\ninterface FieldSettings {\n  allSites: Array<{\n    value: string\n    text: string\n  }>\n  direction: string\n  elementSiteId: string\n  id: string\n  language: string\n  linkOptions: Option[]\n  locale: string\n  mediaOptions: Option[]\n  transforms: string[]\n}\n\ninterface ElementEditor {\n  isFullPage: boolean\n}\n\ninterface Element {\n  id: string\n  label: string\n  url: string\n}\n\ninterface LinkDialogData {\n  url: string\n  text: string\n  newTab: boolean\n  site: string\n}\n\ntype ShowModalFactoryType = (elementType: string, settings: object) => Function\ntype DialogConfigFunction = (title: string, items: object[], initialData: object, onChange: Function, onSubmit: Function) => any\n\nconst showModalFactory: ShowModalFactoryType = (elementType, settings = {}) => {\n  let modal: GarnishModal|undefined\n\n  return () => {\n    if (typeof modal === 'undefined') {\n      modal = Craft.createElementSelectorModal(elementType, Object.assign({\n        resizable: true,\n        multiSelect: false,\n        disableOnSelect: true\n      }, settings))\n    } else {\n      modal.show()\n    }\n  }\n}\n\nconst dialogConfig: DialogConfigFunction = (title, items, initialData, onChange, onSubmit) => {\n  return {\n    title: Craft.t('tinymce', title),\n    body: {\n      type: 'panel',\n      items\n    },\n    buttons: [\n      {\n        type: 'cancel',\n        name: 'cancel',\n        text: Craft.t('tinymce', 'Cancel')\n      },\n      {\n        type: 'submit',\n        name: 'submit',\n        text: Craft.t('tinymce', 'Save'),\n        buttonType: 'primary'\n      }\n    ],\n    initialData,\n    onChange,\n    onSubmit\n  }\n}\n\nclass TinyMCEField {\n  constructor (\n    private readonly _settings: FieldSettings,\n    editorConfig: RawEditorOptions = {}\n  ) {\n    console.log(this._settings)\n    const init = this._init.bind(this)\n    const setup = this._setup.bind(this)\n\n    const options = Object.assign(\n      {\n        skin: 'craft',\n        plugins: 'autoresize lists link image code',\n        content_css: false,\n\n        // Toolbars\n        menubar: false,\n        statusbar: false,\n        toolbar: 'undo redo | blocks | bold italic strikethrough | bullist numlist | insertLink insertMedia | hr | code',\n\n        // Formatting\n        allow_conditional_comments: false,\n        element_format: 'html',\n        fix_list_elements: true,\n\n        // Links\n        relative_urls: false,\n        remove_script_host: false,\n        anchor_top: false,\n        anchor_bottom: false,\n\n        // Auto-resize\n        autoresize_bottom_margin: 0\n      },\n      editorConfig,\n      {\n        selector: `#${this._settings.id}`,\n        language: this._settings.language,\n        directionality: this._settings.direction,\n\n        setup,\n\n        init_instance_callback (editor: Editor) {\n          init(editor)\n\n          const configInit = editorConfig.init_instance_callback\n          if (typeof configInit === 'function') {\n            configInit.apply(this, arguments)\n          }\n        }\n      }\n    )\n\n    tinymce.init(options).then(() => {}, () => {})\n  }\n\n  private _commandHandleFromElementType (elementType: string): string {\n    return elementType.split('\\\\').pop()?.toLowerCase() as string\n  }\n\n  private _setup (editor: Editor): void {\n    const linkOptions: object[] = [{\n      type: 'menuitem',\n      text: Craft.t('tinymce', 'Insert/edit link'),\n      onAction: () => editor.execCommand('mceLink')\n    }]\n    const mediaOptions: object[] = [{\n      type: 'menuitem',\n      text: Craft.t('tinymce', 'Insert/edit image'),\n      onAction: () => editor.execCommand('mceImage')\n    }]\n\n    for (const { elementType, optionTitle, sources } of this._settings.linkOptions) {\n      const elementTypeHandle = this._commandHandleFromElementType(elementType)\n\n      const showModal = showModalFactory(elementType, {\n        sources,\n        criteria: { locale: this._settings.locale },\n        onSelect: ([element]: [Element]) => {\n          const selectedContent = editor.selection.getContent()\n          editor.windowManager.open(dialogConfig(\n            optionTitle,\n            [\n              {\n                type: 'input',\n                name: 'url',\n                label: Craft.t('tinymce', 'URL'),\n                enabled: false\n              },\n              {\n                type: 'input',\n                name: 'text',\n                label: Craft.t('tinymce', 'Text')\n              },\n              {\n                type: 'checkbox',\n                name: 'newTab',\n                label: Craft.t('tinymce', 'Open in new tab?')\n              },\n              {\n                type: 'selectbox',\n                name: 'site',\n                label: Craft.t('tinymce', 'Site'),\n                items: this._settings.allSites\n              }\n            ],\n            {\n              url: `${element.url}#${elementTypeHandle}:${element.id}@${this._settings.elementSiteId}`,\n              text: selectedContent ?? element.label,\n              site: this._settings.elementSiteId\n            },\n            (api: any) => {\n              const data = api.getData() as LinkDialogData\n              api.setData({\n                url: data.url.replace(/@[0-9]+$/, `@${data.site}`)\n              })\n            },\n            (api: any) => {\n              const data = api.getData() as LinkDialogData\n              const command = selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n              const newContent = `<a href=\"${data.url}\" title=\"${data.text}\"${data.newTab ? ' target=\"_blank\"' : ''}>${data.text}</a>`\n\n              editor.execCommand(command, false, newContent)\n              api.close()\n            }\n          ))\n        }\n      })\n\n      linkOptions.push({\n        type: 'menuitem',\n        text: optionTitle,\n        onAction: () => showModal()\n      })\n    }\n\n    editor.ui.registry.addMenuButton('insertLink', {\n      icon: 'link',\n      tooltip: Craft.t('tinymce', 'Link'),\n      fetch: (callback) => callback(linkOptions)\n    })\n\n    for (const { elementType, optionTitle, sources } of this._settings.mediaOptions) {\n      const elementTypeHandle = this._commandHandleFromElementType(elementType)\n\n      const showModal = showModalFactory(elementType, {\n        sources,\n        transforms: this._settings.transforms,\n        storageKey: 'RichTextFieldType.ChooseImage',\n        criteria: {\n          locale: this._settings.locale,\n          kind: 'image'\n        },\n        onSelect: ([element]: [Element], transform: string|null = null) => {\n          const selectedContent = editor.selection.getContent()\n\n          const url = `${element.url}#${elementTypeHandle}:${element.id}` + (transform !== null ? `:${transform}` : '')\n          const title = element.label\n          const width = ''\n          const height = ''\n          const command = selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n\n          editor.execCommand(command, false, `<img src=\"${url}\" alt=\"${title}\" width=\"${width}\" height=\"${height}\">`)\n        }\n      })\n\n      mediaOptions.push({\n        type: 'menuitem',\n        text: optionTitle,\n        onAction: () => showModal()\n      })\n    }\n\n    editor.ui.registry.addMenuButton('insertMedia', {\n      icon: 'image',\n      tooltip: Craft.t('tinymce', 'Image'),\n      fetch: (callback) => callback(mediaOptions)\n    })\n  }\n\n  private _init (editor: Editor): void {\n    const $element = $(editor.container)\n    const $form = $(editor.formElement)\n\n    editor.on('focus', (_: EditorEvent<any>) => $element.addClass('mce-focused'))\n    editor.on('blur', (_: EditorEvent<any>) => $element.removeClass('mce-focused'))\n\n    // Update the form value on any content change, and trigger a change event so drafts can autosave\n    const elementEditor: ElementEditor = $form.data('elementEditor')\n    const contentObserver = new window.MutationObserver(() => {\n      $(editor.targetElm).val(editor.getContent())\n      const $target = elementEditor.isFullPage ? Garnish.$bod : $form\n      $target.trigger('change')\n    })\n    contentObserver.observe(editor.getBody(), {\n      characterData: true,\n      childList: true,\n      subtree: true\n    })\n\n    // Allow use of Craft element save shortcuts\n    editor.addShortcut(\n      'meta+s',\n      '',\n      () => Garnish.uiLayerManager.triggerShortcut(new KeyboardEvent('keydown', {\n        shiftKey: false,\n        metaKey: true,\n        ctrlKey: true,\n        altKey: false,\n        keyCode: Garnish.S_KEY\n      }))\n    )\n    editor.addShortcut(\n      'shift+meta+s',\n      '',\n      () => Garnish.uiLayerManager.triggerShortcut(new KeyboardEvent('keydown', {\n        shiftKey: true,\n        metaKey: true,\n        ctrlKey: true,\n        altKey: false,\n        keyCode: Garnish.S_KEY\n      }))\n    )\n  }\n}\n\nexport { FieldSettings, TinyMCEField }\n","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FieldSettings, TinyMCEField } from './TinyMCEField'\n\ndeclare global {\n  interface Window {\n    initTinyMCE: (settings: FieldSettings) => void\n  }\n}\n\nwindow.initTinyMCE = (settings) => new TinyMCEField(settings)\n"],"names":["showModalFactory","elementType","settings","modal","Craft","createElementSelectorModal","Object","assign","resizable","multiSelect","disableOnSelect","show","TinyMCEField","constructor","_settings","editorConfig","console","log","this","init","_init","bind","setup","_setup","options","skin","plugins","content_css","menubar","statusbar","toolbar","allow_conditional_comments","element_format","fix_list_elements","relative_urls","remove_script_host","anchor_top","anchor_bottom","autoresize_bottom_margin","selector","id","language","directionality","direction","init_instance_callback","editor","configInit","apply","arguments","tinymce","then","_commandHandleFromElementType","split","pop","toLowerCase","linkOptions","type","text","t","onAction","execCommand","mediaOptions","optionTitle","sources","elementTypeHandle","showModal","criteria","locale","onSelect","element","selectedContent","selection","getContent","title","items","initialData","onChange","onSubmit","windowManager","open","name","label","enabled","allSites","url","elementSiteId","site","api","data","getData","setData","replace","command","length","newContent","newTab","close","body","buttons","buttonType","push","ui","registry","addMenuButton","icon","tooltip","fetch","callback","transforms","storageKey","kind","transform","$element","$","container","$form","formElement","on","_","addClass","removeClass","elementEditor","window","MutationObserver","targetElm","val","isFullPage","Garnish","$bod","trigger","observe","getBody","characterData","childList","subtree","addShortcut","uiLayerManager","triggerShortcut","KeyboardEvent","shiftKey","metaKey","ctrlKey","altKey","keyCode","S_KEY","module","exports","jQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","initTinyMCE"],"sourceRoot":""}