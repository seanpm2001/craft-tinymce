{"version":3,"file":"input.js","mappings":"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","sources":["webpack://craft-tinymce/./client/src/scripts/TinyMCEField.ts","webpack://craft-tinymce/external var \"jQuery\"","webpack://craft-tinymce/webpack/bootstrap","webpack://craft-tinymce/./client/src/scripts/main.ts"],"sourcesContent":["import * as $ from 'jquery'\nimport { Editor, EditorEvent, RawEditorOptions, TinyMCE } from 'tinymce'\n\ndeclare const tinymce: TinyMCE\n\ninterface Option {\n  elementType: string\n  optionTitle: string\n  sources: string[]\n}\n\ninterface FieldSettings {\n  allSites: Array<{\n    value: string\n    text: string\n  }>\n  defaultTransform: string\n  direction: string\n  editorConfig: RawEditorOptions\n  elementSiteId: string\n  id: string\n  language: string\n  linkOptions: Option[]\n  locale: string\n  transforms: Array<{\n    value: string\n    text: string\n  }>\n  volumes: string[]\n}\n\ninterface ElementEditor {\n  isFullPage: boolean\n}\n\ninterface Element {\n  id: string\n  label: string\n  url: string\n}\n\ninterface LinkDialogData {\n  url: string\n  text: string\n  newTab: boolean\n  site: string\n}\n\ninterface AssetDialogData {\n  title: string\n  caption: string\n  link: string\n  newTab: boolean\n  transform: string\n}\n\ntype ShowModalFactoryType = (elementType: string, settings: object) => Function\ntype DialogConfigFunction = (title: string, items: object[], initialData: object, onChange: Function, onSubmit: Function) => any\n\nconst showModalFactory: ShowModalFactoryType = (elementType, settings = {}) => {\n  let modal: GarnishModal|undefined\n\n  return () => {\n    if (typeof modal === 'undefined') {\n      modal = Craft.createElementSelectorModal(elementType, Object.assign({\n        resizable: true,\n        multiSelect: false,\n        disableOnSelect: true\n      }, settings))\n    } else {\n      modal.show()\n    }\n  }\n}\n\nconst dialogConfig: DialogConfigFunction = (title, items, initialData, onChange, onSubmit) => {\n  return {\n    title,\n    body: {\n      type: 'panel',\n      items\n    },\n    buttons: [\n      {\n        type: 'cancel',\n        name: 'cancel',\n        text: Craft.t('tinymce', 'Cancel')\n      },\n      {\n        type: 'submit',\n        name: 'submit',\n        text: Craft.t('tinymce', 'Save'),\n        buttonType: 'primary'\n      }\n    ],\n    initialData,\n    onChange,\n    onSubmit\n  }\n}\n\nclass TinyMCEField {\n  public editor: Editor\n\n  constructor (private readonly _settings: FieldSettings) {\n    const settings = this._settings\n    const options = Object.assign(\n      {\n        skin: 'craft',\n        plugins: 'autoresize lists link image code',\n        content_css: false,\n\n        // Toolbars\n        menubar: false,\n        statusbar: false,\n        toolbar: 'undo redo | blocks | bold italic strikethrough | bullist numlist | insertLink insertImage | hr | code',\n\n        // Context menu (the default setting, except replacing the inbuilt link/image options with our own)\n        contextmenu: 'craftLink linkchecker craftImage table spellchecker configurepermanentpen',\n\n        // Formatting\n        allow_conditional_comments: false,\n        element_format: 'xhtml',\n        entity_encoding: 'raw',\n        fix_list_elements: true,\n\n        // Links\n        relative_urls: false,\n        remove_script_host: false,\n        anchor_top: false,\n        anchor_bottom: false,\n\n        // Auto-resize\n        autoresize_bottom_margin: 0\n      },\n      this._settings.editorConfig,\n      {\n        selector: `#${this._settings.id}`,\n        language: this._settings.language,\n        directionality: this._settings.direction,\n\n        setup: (editor: Editor) => {\n          this.editor = editor\n          this._setup()\n        },\n\n        init_instance_callback: (editor: Editor) => {\n          this.editor = editor\n          this._init()\n\n          const configInit = settings.editorConfig.init_instance_callback\n          if (typeof configInit === 'function') {\n            configInit.apply(this, arguments)\n          }\n        }\n      }\n    )\n\n    tinymce.init(options).then(() => {}, () => {})\n  }\n\n  private _commandHandleFromElementType (elementType: string): string {\n    return elementType.split('\\\\').pop()?.toLowerCase() as string\n  }\n\n  private _setup (): void {\n    const linkOptions: object[] = []\n    const elementTypeHandles: string[] = []\n    const transformOptions = [{\n      value: '',\n      text: Craft.t('tinymce', 'No transform')\n    }]\n    transformOptions.push(...this._settings.transforms)\n\n    for (const { elementType, optionTitle, sources } of this._settings.linkOptions) {\n      const elementTypeHandle = this._commandHandleFromElementType(elementType)\n      const menuItemTitle = `${elementTypeHandle}Link`\n\n      const showModal = showModalFactory(elementType, {\n        sources,\n        criteria: { locale: this._settings.locale },\n        onSelect: ([element]: [Element]) => {\n          const selectedContent = this.editor.selection.getContent()\n          this.editor.windowManager.open(this._linkDialogConfig(optionTitle, false, {\n            url: `${element.url}#${elementTypeHandle}:${element.id}@${this._settings.elementSiteId}:url`,\n            // Doing `String(element.label)` in case the element title was a number\n            text: selectedContent.length > 0 ? selectedContent : String(element.label),\n            site: this._settings.elementSiteId\n          }))\n        }\n      })\n\n      linkOptions.push({\n        type: 'menuitem',\n        text: optionTitle,\n        onAction: () => showModal()\n      })\n      this.editor.ui.registry.addMenuItem(menuItemTitle, {\n        icon: 'link',\n        text: optionTitle,\n        onAction: () => showModal()\n      })\n      elementTypeHandles.push(menuItemTitle)\n    }\n\n    linkOptions.push({\n      type: 'menuitem',\n      text: Craft.t('tinymce', 'Insert/edit link'),\n      onAction: () => this.editor.execCommand('mceLink')\n    })\n\n    // Insert link menu button, for use on the toolbar\n    this.editor.ui.registry.addMenuButton('insertLink', {\n      icon: 'link',\n      tooltip: Craft.t('tinymce', 'Link'),\n      fetch: (callback) => callback(linkOptions)\n    })\n\n    // Edit link menu item, for use on the context menu\n    const editLinkTitle = Craft.t('tinymce', 'Edit link')\n    this.editor.ui.registry.addMenuItem('editLink', {\n      icon: 'link',\n      text: editLinkTitle,\n      onAction: (_) => {\n        const element = this.editor.dom.getParent(this.editor.selection.getStart(), 'a[href]') as globalThis.Element\n        const url = element?.getAttribute('href') ?? ''\n        const siteMatch = url.match(/@([0-9]+)(:url)$/)\n        this.editor.selection.select(element)\n        this.editor.windowManager.open(this._linkDialogConfig(editLinkTitle, true, {\n          url,\n          text: element?.textContent ?? '',\n          newTab: (element?.getAttribute('target') ?? '') === '_blank',\n          site: siteMatch !== null ? siteMatch[1] : this._settings.elementSiteId\n        }))\n      }\n    })\n\n    this.editor.ui.registry.addContextMenu('craftLink', {\n      update: (element) => {\n        const parents = this.editor.dom.getParents(element, 'a')\n\n        // If we're not on a link, show the element link options\n        if (parents.length === 0) {\n          return `${elementTypeHandles.join(' ')} link`\n        }\n\n        // If we're on a Craft link, show the Craft edit link option\n        // Otherwise, show the normal TinyMCE link option\n        const onCraftLink = parents.some((parent) => parent.href.endsWith(':url'))\n\n        return `${onCraftLink ? 'editLink' : 'link openlink'} unlink`\n      }\n    })\n\n    // Image button, for use on the toolbar\n    const imageButtonTitle = Craft.t('tinymce', 'Insert an image')\n    this.editor.ui.registry.addButton('insertImage', {\n      icon: 'image',\n      tooltip: imageButtonTitle,\n      onAction: () => showModalFactory('craft\\\\elements\\\\Asset', {\n        sources: this._settings.volumes,\n        transforms: this._settings.transforms.map((transform) => {\n          return {\n            handle: transform.value,\n            name: transform.text\n          }\n        }),\n        storageKey: 'RichTextFieldType.ChooseImage',\n        criteria: {\n          locale: this._settings.locale,\n          kind: 'image'\n        },\n        onSelect: ([element]: [Element], transform: string|null = null) => {\n          this.editor.windowManager.open(this._imageDialogConfig(imageButtonTitle, true, transformOptions, element, {\n            transform: transform ?? this._settings.defaultTransform\n          }))\n        }\n      })()\n    })\n\n    // Image menu item, for use on the context menu\n    const editImageTitle = Craft.t('tinymce', 'Edit image')\n    this.editor.ui.registry.addMenuItem('editImage', {\n      icon: 'image',\n      text: editImageTitle,\n      onAction: (_) => {\n        const selectionStart = this.editor.selection.getStart()\n        const img = this.editor.dom.getParent(selectionStart, 'img') as globalThis.Element\n        const a = this.editor.dom.getParent(img, 'a')\n        const figure = this.editor.dom.getParent(a ?? img, 'figure') as globalThis.Element\n        const figcaption = (a ?? img).nextSibling\n        const imgSrc = img?.getAttribute('src')\n\n        const transformMatch = imgSrc?.match(/:transform:(.+)$/) ?? []\n        const transform = transformMatch.length > 0 ? transformMatch.pop() as string : ''\n\n        const elementIdMatch = imgSrc?.match(/#asset:([0-9]+)/) as string[]\n        const elementId = elementIdMatch.pop() as string\n        const elementUrl = (transform !== '' ? imgSrc?.replace(`/_${transform}/`, '/') : imgSrc)\n          ?.replace(`:transform:${transform}`, '')\n          ?.replace(/:url$/, '')\n          ?.replace(`#asset:${elementId}`, '') as string\n\n        this.editor.selection.select(figure)\n        this.editor.windowManager.open(this._imageDialogConfig(editImageTitle, true, transformOptions, {\n          id: elementId,\n          url: elementUrl,\n          label: '' // We don't care about the element label at this point\n        }, {\n          title: img?.getAttribute('alt') ?? '',\n          caption: figcaption?.textContent ?? '',\n          link: a?.href ?? '',\n          newTab: a?.target === '_blank' ?? false,\n          transform\n        }))\n      }\n    })\n\n    this.editor.ui.registry.addContextMenu('craftImage', {\n      update: (element) => {\n        const ancestors = this.editor.dom.getParents(element, 'figure, img')\n\n        // If we're not on an image, don't show an option\n        if (ancestors.length === 0) {\n          return ''\n        }\n\n        // If we're not on a Craft asset, show the normal TinyMCE image option\n        const figure = ancestors.some((ancestor) => ancestor.tagName === 'FIGURE')\n\n        return figure ? 'editImage' : 'image'\n      }\n    })\n  }\n\n  private _init (): void {\n    const $element = $(this.editor.container)\n    const $form = $(this.editor.formElement)\n\n    this.editor.on('focus', (_: EditorEvent<any>) => $element.addClass('mce-focused'))\n    this.editor.on('blur', (_: EditorEvent<any>) => $element.removeClass('mce-focused'))\n\n    // Update the form value on any content change, and trigger a change event so drafts can autosave\n    const elementEditor: ElementEditor = $form.data('elementEditor')\n    const contentObserver = new window.MutationObserver(() => {\n      $(this.editor.targetElm).val(this.editor.getContent())\n      const $target = elementEditor.isFullPage ? Garnish.$bod : $form\n      $target.trigger('change')\n    })\n    contentObserver.observe(this.editor.getBody(), {\n      characterData: true,\n      childList: true,\n      subtree: true\n    })\n\n    // Allow use of Craft element save shortcuts\n    this.editor.addShortcut(\n      'meta+s',\n      '',\n      () => Garnish.uiLayerManager.triggerShortcut(new KeyboardEvent('keydown', {\n        shiftKey: false,\n        metaKey: true,\n        ctrlKey: true,\n        altKey: false,\n        keyCode: Garnish.S_KEY\n      }))\n    )\n    this.editor.addShortcut(\n      'shift+meta+s',\n      '',\n      () => Garnish.uiLayerManager.triggerShortcut(new KeyboardEvent('keydown', {\n        shiftKey: true,\n        metaKey: true,\n        ctrlKey: true,\n        altKey: false,\n        keyCode: Garnish.S_KEY\n      }))\n    )\n  }\n\n  private _linkDialogConfig (title: string, enforceReplace: boolean, initialData: object): any {\n    const selectedContent = this.editor.selection.getContent()\n    return dialogConfig(\n      title,\n      [\n        {\n          type: 'input',\n          name: 'url',\n          label: Craft.t('tinymce', 'URL'),\n          enabled: false\n        },\n        {\n          type: 'input',\n          name: 'text',\n          label: Craft.t('tinymce', 'Text')\n        },\n        {\n          type: 'checkbox',\n          name: 'newTab',\n          label: Craft.t('tinymce', 'Open in new tab?')\n        },\n        {\n          type: 'selectbox',\n          name: 'site',\n          label: Craft.t('tinymce', 'Site'),\n          items: this._settings.allSites\n        }\n      ],\n      initialData,\n      (api: any) => {\n        const data = api.getData() as LinkDialogData\n        api.setData({\n          url: data.url.replace(/@([0-9]+)(:url)$/, `@${data.site}:url`)\n        })\n      },\n      (api: any) => {\n        const data = api.getData() as LinkDialogData\n        const command = enforceReplace || selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n        const newContent = `<a href=\"${data.url}\" title=\"${data.text}\"${data.newTab ? ' target=\"_blank\"' : ''}>${data.text}</a>`\n\n        this.editor.execCommand(command, false, newContent)\n        api.close()\n      }\n    )\n  }\n\n  private _imageDialogConfig (\n    title: string,\n    enforceReplace: boolean,\n    transforms: object,\n    element: Element,\n    initialData: object\n  ): any {\n    const selectedContent = this.editor.selection.getContent()\n    return dialogConfig(\n      title,\n      [\n        {\n          type: 'input',\n          name: 'title',\n          label: Craft.t('tinymce', 'Title')\n        },\n        {\n          type: 'input',\n          name: 'caption',\n          label: Craft.t('tinymce', 'Caption')\n        },\n        {\n          type: 'input',\n          name: 'link',\n          label: Craft.t('tinymce', 'Link')\n        },\n        {\n          type: 'checkbox',\n          name: 'newTab',\n          label: Craft.t('tinymce', 'Open in new tab?')\n        },\n        {\n          type: 'selectbox',\n          name: 'transform',\n          label: Craft.t('tinymce', 'Transform'),\n          items: transforms\n        }\n      ],\n      initialData,\n      () => {},\n      (api: any) => {\n        const data = api.getData() as AssetDialogData\n        const command = enforceReplace || selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n        const hasTitle = data.title.length > 0\n        const hasCaption = data.caption.length > 0\n        const hasLink = data.link.length > 0\n        const hasTransform = data.transform !== ''\n\n        const url = [\n          hasTransform ? element.url.replace(/\\/([^/]+)$/, `/_${data.transform}/$1`) : element.url,\n          `#asset:${element.id}`,\n          hasTransform ? `:transform:${data.transform}` : ''\n        ].join('')\n        const content = [\n          '<figure>',\n          hasLink ? `<a href=\"${data.link}\"${data.newTab ? ' target=\"_blank\"' : ''}>` : '',\n          `<img src=\"${url}\"${hasTitle ? `alt=\"${data.title}\"` : ''}>`,\n          hasLink ? '</a>' : '',\n          hasCaption ? `<figcaption>${data.caption}</figcaption>` : ''\n        ].join('')\n\n        this.editor.execCommand(command, false, content)\n        api.close()\n      }\n    )\n  }\n}\n\nexport { FieldSettings, TinyMCEField }\n","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FieldSettings, TinyMCEField } from './TinyMCEField'\n\ndeclare global {\n  interface Window {\n    initTinyMCE: (settings: FieldSettings) => void\n  }\n}\n\nwindow.initTinyMCE = (settings) => new TinyMCEField(settings)\n"],"names":["showModalFactory","elementType","settings","modal","Craft","createElementSelectorModal","Object","assign","resizable","multiSelect","disableOnSelect","show","dialogConfig","title","items","initialData","onChange","onSubmit","body","type","buttons","name","text","t","buttonType","TinyMCEField","constructor","_settings","this","options","skin","plugins","content_css","menubar","statusbar","toolbar","contextmenu","allow_conditional_comments","element_format","entity_encoding","fix_list_elements","relative_urls","remove_script_host","anchor_top","anchor_bottom","autoresize_bottom_margin","editorConfig","selector","id","language","directionality","direction","setup","editor","_setup","init_instance_callback","_init","configInit","apply","arguments","tinymce","init","then","_commandHandleFromElementType","split","pop","toLowerCase","linkOptions","elementTypeHandles","transformOptions","value","push","transforms","optionTitle","sources","elementTypeHandle","menuItemTitle","showModal","criteria","locale","onSelect","element","selectedContent","selection","getContent","windowManager","open","_linkDialogConfig","url","elementSiteId","length","String","label","site","onAction","ui","registry","addMenuItem","icon","execCommand","addMenuButton","tooltip","fetch","callback","editLinkTitle","_","dom","getParent","getStart","getAttribute","siteMatch","match","select","textContent","newTab","addContextMenu","update","parents","getParents","join","some","parent","href","endsWith","imageButtonTitle","addButton","volumes","map","transform","handle","storageKey","kind","_imageDialogConfig","defaultTransform","editImageTitle","selectionStart","img","a","figure","figcaption","nextSibling","imgSrc","transformMatch","elementId","elementUrl","replace","caption","link","target","ancestors","ancestor","tagName","$element","$","container","$form","formElement","on","addClass","removeClass","elementEditor","data","window","MutationObserver","targetElm","val","isFullPage","Garnish","$bod","trigger","observe","getBody","characterData","childList","subtree","addShortcut","uiLayerManager","triggerShortcut","KeyboardEvent","shiftKey","metaKey","ctrlKey","altKey","keyCode","S_KEY","enforceReplace","enabled","allSites","api","getData","setData","command","newContent","close","hasTitle","hasCaption","hasLink","hasTransform","content","module","exports","jQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","initTinyMCE"],"sourceRoot":""}