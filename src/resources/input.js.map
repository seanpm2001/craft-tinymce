{"version":3,"file":"input.js","mappings":"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","sources":["webpack://craft-tinymce/./client/src/scripts/TinyMCEField.ts","webpack://craft-tinymce/external var \"jQuery\"","webpack://craft-tinymce/webpack/bootstrap","webpack://craft-tinymce/./client/src/scripts/main.ts"],"sourcesContent":["import * as $ from 'jquery'\nimport { Editor, EditorEvent, RawEditorOptions, TinyMCE } from 'tinymce'\n\ndeclare const tinymce: TinyMCE\n\ninterface Option {\n  elementType: string\n  optionTitle: string\n  sources: string[]\n}\n\ninterface FieldSettings {\n  direction: string\n  id: string\n  language: string\n  linkOptions: Option[]\n  locale: string\n  mediaOptions: Option[]\n  transforms: string[]\n}\n\ninterface ElementEditor {\n  isFullPage: boolean\n}\n\ninterface Element {\n  id: string\n  label: string\n  url: string\n}\n\nconst showModalFactory: (elementType: string, settings: object) => Function = (elementType, settings = {}) => {\n  let modal: GarnishModal|undefined\n\n  return () => {\n    if (typeof modal === 'undefined') {\n      modal = Craft.createElementSelectorModal(elementType, Object.assign({\n        resizable: true,\n        multiSelect: false,\n        disableOnSelect: true\n      }, settings))\n    } else {\n      modal.show()\n    }\n  }\n}\n\nclass TinyMCEField {\n  constructor (\n    private readonly _settings: FieldSettings,\n    editorConfig: RawEditorOptions = {}\n  ) {\n    console.log(this._settings)\n    const init = this._init.bind(this)\n    const setup = this._setup.bind(this)\n\n    const options = Object.assign(\n      {\n        plugins: 'autoresize lists link image code',\n        content_css: false,\n\n        // Toolbars\n        menubar: false,\n        statusbar: false,\n        toolbar: 'undo redo | blocks | bold italic strikethrough | bullist numlist | link craftElementsEntryLink craftElementsAssetLink | image craftElementsAssetMedia | hr | code',\n\n        // Formatting\n        allow_conditional_comments: false,\n        element_format: 'html',\n        fix_list_elements: true,\n\n        // Links\n        relative_urls: false,\n        remove_script_host: false,\n        anchor_top: false,\n        anchor_bottom: false,\n\n        // Auto-resize\n        autoresize_bottom_margin: 0\n      },\n      editorConfig,\n      {\n        selector: `#${this._settings.id}`,\n        language: this._settings.language,\n        directionality: this._settings.direction,\n\n        setup,\n\n        init_instance_callback (editor: Editor) {\n          init(editor)\n\n          const configInit = editorConfig.init_instance_callback\n          if (typeof configInit === 'function') {\n            configInit.apply(this, arguments)\n          }\n        }\n      }\n    )\n\n    tinymce.init(options).then(() => {}, () => {})\n  }\n\n  private _commandHandleFromElementType (elementType: string): string {\n    return elementType.split('\\\\')\n      .map((segment, i) => (i === 0 ? segment[0] : segment[0].toUpperCase()) + segment.slice(1).toLowerCase())\n      .join('')\n  }\n\n  private _setup (editor: Editor): void {\n    for (const { elementType, optionTitle, sources } of this._settings.linkOptions) {\n      const elementTypeHandle = this._commandHandleFromElementType(elementType)\n      const command = `${elementTypeHandle}Link`\n\n      const showModal = showModalFactory(elementType, {\n        sources,\n        criteria: { locale: this._settings.locale },\n        onSelect ([element]: [Element]) {\n          const selectedContent = editor.selection.getContent()\n\n          const url = `${element.url}#${elementTypeHandle}:${element.id}`\n          const title = element.label\n          const label = (selectedContent ?? element.label)\n          const command = selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n\n          editor.execCommand(command, false, `<a href=\"${url}\" title=\"${title}\">${label}</a>`)\n        }\n      })\n\n      editor.ui.registry.addButton(command, {\n        icon: 'link',\n        tooltip: optionTitle,\n        onAction: () => showModal()\n      })\n    }\n\n    for (const { elementType, optionTitle, sources } of this._settings.mediaOptions) {\n      const elementTypeHandle = this._commandHandleFromElementType(elementType)\n      const command = `${elementTypeHandle}Media`\n\n      const showModal = showModalFactory(elementType, {\n        sources,\n        transforms: this._settings.transforms,\n        storageKey: 'RichTextFieldType.ChooseImage',\n        criteria: {\n          locale: this._settings.locale,\n          kind: 'image'\n        },\n        onSelect: ([element]: [Element], transform: string|null = null) => {\n          const selectedContent = editor.selection.getContent()\n\n          const url = `${element.url}#${elementTypeHandle}:${element.id}` + (transform !== null ? `:${transform}` : '')\n          const title = element.label\n          const width = ''\n          const height = ''\n          const command = selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n\n          editor.execCommand(command, false, `<img src=\"${url}\" alt=\"${title}\" width=\"${width}\" height=\"${height}\">`)\n        }\n      })\n\n      editor.ui.registry.addButton(command, {\n        icon: 'image',\n        tooltip: optionTitle,\n        onAction: () => showModal()\n      })\n    }\n  }\n\n  private _init (editor: Editor): void {\n    const $element = $(editor.container)\n    const $form = $(editor.formElement)\n\n    editor.on('focus', (_: EditorEvent<any>) => $element.addClass('mce-focused'))\n    editor.on('blur', (_: EditorEvent<any>) => $element.removeClass('mce-focused'))\n\n    // Update the form value on any content change, and trigger a change event so drafts can autosave\n    const elementEditor: ElementEditor = $form.data('elementEditor')\n    const contentObserver = new window.MutationObserver(() => {\n      $(editor.targetElm).val(editor.getContent())\n      const $target = elementEditor.isFullPage ? Garnish.$bod : $form\n      $target.trigger('change')\n    })\n    contentObserver.observe(editor.getBody(), {\n      characterData: true,\n      childList: true,\n      subtree: true\n    })\n\n    // Allow use of Craft element save shortcuts\n    editor.addShortcut(\n      'meta+s',\n      '',\n      () => Garnish.uiLayerManager.triggerShortcut(new KeyboardEvent('keydown', {\n        shiftKey: false,\n        metaKey: true,\n        ctrlKey: true,\n        altKey: false,\n        keyCode: Garnish.S_KEY\n      }))\n    )\n    editor.addShortcut(\n      'shift+meta+s',\n      '',\n      () => Garnish.uiLayerManager.triggerShortcut(new KeyboardEvent('keydown', {\n        shiftKey: true,\n        metaKey: true,\n        ctrlKey: true,\n        altKey: false,\n        keyCode: Garnish.S_KEY\n      }))\n    )\n  }\n}\n\nexport { FieldSettings, TinyMCEField }\n","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FieldSettings, TinyMCEField } from './TinyMCEField'\n\ndeclare global {\n  interface Window {\n    initTinyMCE: (settings: FieldSettings) => void\n  }\n}\n\nwindow.initTinyMCE = (settings) => new TinyMCEField(settings)\n"],"names":["showModalFactory","elementType","settings","modal","Craft","createElementSelectorModal","Object","assign","resizable","multiSelect","disableOnSelect","show","TinyMCEField","constructor","_settings","editorConfig","console","log","this","init","_init","bind","setup","_setup","options","plugins","content_css","menubar","statusbar","toolbar","allow_conditional_comments","element_format","fix_list_elements","relative_urls","remove_script_host","anchor_top","anchor_bottom","autoresize_bottom_margin","selector","id","language","directionality","direction","init_instance_callback","editor","configInit","apply","arguments","tinymce","then","_commandHandleFromElementType","split","map","segment","i","toUpperCase","slice","toLowerCase","join","optionTitle","sources","linkOptions","elementTypeHandle","command","showModal","criteria","locale","onSelect","element","selectedContent","selection","getContent","url","title","label","length","execCommand","ui","registry","addButton","icon","tooltip","onAction","mediaOptions","transforms","storageKey","kind","transform","$element","$","container","$form","formElement","on","_","addClass","removeClass","elementEditor","data","window","MutationObserver","targetElm","val","isFullPage","Garnish","$bod","trigger","observe","getBody","characterData","childList","subtree","addShortcut","uiLayerManager","triggerShortcut","KeyboardEvent","shiftKey","metaKey","ctrlKey","altKey","keyCode","S_KEY","module","exports","jQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","initTinyMCE"],"sourceRoot":""}