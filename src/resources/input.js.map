{"version":3,"file":"input.js","mappings":"+GAAA,eAoCMA,EAAwE,CAACC,EAAaC,EAAW,CAAC,KACtG,IAAIC,EAEJ,MAAO,UACgB,IAAVA,EACTA,EAAQC,MAAMC,2BAA2BJ,EAAaK,OAAOC,OAAO,CAClEC,WAAW,EACXC,aAAa,EACbC,iBAAiB,GAChBR,IAEHC,EAAMQ,M,CAET,EA6IqB,EAAAC,aA1IxB,MACEC,YACmBC,EACjBC,EAAiC,CAAC,GADjB,KAAAD,UAAAA,EAGjBE,QAAQC,IAAIC,KAAKJ,WACjB,MAAMK,EAAOD,KAAKE,MAAMC,KAAKH,MACvBI,EAAQJ,KAAKK,OAAOF,KAAKH,MAEzBM,EAAUlB,OAAOC,OACrB,CACEkB,QAAS,mCACTC,aAAa,EAGbC,SAAS,EACTC,WAAW,EACXC,QAAS,6HAGTC,4BAA4B,EAC5BC,eAAgB,OAChBC,mBAAmB,EAGnBC,eAAe,EACfC,oBAAoB,EACpBC,YAAY,EACZC,eAAe,EAGfC,yBAA0B,GAE5BtB,EACA,CACEuB,SAAU,IAAIpB,KAAKJ,UAAUyB,KAC7BC,SAAUtB,KAAKJ,UAAU0B,SACzBC,eAAgBvB,KAAKJ,UAAU4B,UAE/BpB,QAEAqB,uBAAwBC,GACtBzB,EAAKyB,GAEL,MAAMC,EAAa9B,EAAa4B,uBACN,mBAAfE,GACTA,EAAWC,MAAM5B,KAAM6B,UAE3B,IAIJC,QAAQ7B,KAAKK,GAASyB,MAAK,SAAU,QACvC,CAEQ1B,OAAQqB,GACd,IAAK,MAAM,YAAE3C,EAAW,YAAEiD,EAAW,QAAEC,KAAajC,KAAKJ,UAAUsC,YAAa,CAC9E,MAAMC,EAAoBpD,EAAYqD,QAAQ,YAAaC,GAAkBA,EAAMC,gBAC7EC,EAAU,GAAGJ,QAEbK,EAAY1D,EAAiBC,EAAa,CAC9CkD,UACAQ,SAAU,CAAEC,OAAQ1C,KAAKJ,UAAU8C,QACnCC,UAAWC,IACT,MAAMC,EAAkBnB,EAAOoB,UAAUC,aAEnCC,EAAM,GAAGJ,EAAQI,OAAOb,KAAqBS,EAAQvB,KACrD4B,EAAQL,EAAQM,MAChBA,EAASL,QAAAA,EAAmBD,EAAQM,MACpCX,EAAUM,EAAgBM,OAAS,EAAI,oBAAsB,mBAEnEzB,EAAO0B,YAAYb,GAAS,EAAO,YAAYS,aAAeC,MAAUC,QAC1E,IAGFxB,EAAO2B,UAAUd,EAAS,CACxBe,KAAM,OACNC,WAAY,WAAahB,EACzBiB,QAASxB,EACTyB,QAAS,IAAMjB,K,CAInB,IAAK,MAAM,YAAEzD,EAAW,YAAEiD,EAAW,QAAEC,KAAajC,KAAKJ,UAAU8D,aAAc,CAC/E,MAAMvB,EAAoBpD,EAAYqD,QAAQ,YAAaC,GAAUA,EAAMC,gBACrEC,EAAU,GAAGJ,SAEbK,EAAY1D,EAAiBC,EAAa,CAC9CkD,UACA0B,WAAY3D,KAAKJ,UAAU+D,WAC3BJ,WAAY,gCACZd,SAAU,CACRC,OAAQ1C,KAAKJ,UAAU8C,OACvBkB,KAAM,SAERjB,SAAU,EAAEC,GAAqBiB,EAAyB,QACxD,MAAMhB,EAAkBnB,EAAOoB,UAAUC,aAEnCC,EAAM,GAAGJ,EAAQI,OAAOb,KAAqBS,EAAQvB,MAAsB,OAAdwC,EAAqB,IAAIA,IAAc,IACpGZ,EAAQL,EAAQM,MAGhBX,EAAUM,EAAgBM,OAAS,EAAI,oBAAsB,mBAEnEzB,EAAO0B,YAAYb,GAAS,EAAO,aAAaS,WAAaC,yBAA8C,IAI/GvB,EAAO2B,UAAUd,EAAS,CACxBe,KAAM,QACNC,WAAY,WAAahB,EACzBiB,QAASxB,EACTyB,QAAS,IAAMjB,K,CAGrB,CAEQtC,MAAOwB,GACb,MAAMoC,EAAWC,EAAErC,EAAOsC,WACpBC,EAAQF,EAAErC,EAAOwC,aAEvBxC,EAAOyC,GAAG,SAAUC,GAAwBN,EAASO,SAAS,iBAC9D3C,EAAOyC,GAAG,QAASC,GAAwBN,EAASQ,YAAY,iBAEhE,MAAMC,EAA+BN,EAAMO,KAAK,iBACxB,IAAIC,OAAOC,kBAAiB,KAClDX,EAAErC,EAAOiD,WAAWC,IAAIlD,EAAOqB,eACfwB,EAAcM,WAAaC,QAAQC,KAAOd,GAClDe,QAAQ,SAAS,IAEXC,QAAQvD,EAAOwD,UAAW,CACxCC,eAAe,EACfC,WAAW,EACXC,SAAS,GAEb,E,UC3LFC,EAAOC,QAAUC,M,GCCbC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,MCtBA,eAQAd,OAAOsB,YAAe/G,GAAa,IAAI,EAAAU,aAAaV,E","sources":["webpack://craft-tinymce/./client/src/scripts/TinyMCEField.ts","webpack://craft-tinymce/external var \"jQuery\"","webpack://craft-tinymce/webpack/bootstrap","webpack://craft-tinymce/./client/src/scripts/main.ts"],"sourcesContent":["import * as $ from 'jquery'\nimport { Editor, EditorEvent, RawEditorOptions, TinyMCE } from 'tinymce'\n\ndeclare const tinymce: TinyMCE\n\ninterface Option {\n  elementType: string\n  optionTitle: string\n  sources: string[]\n}\n\ninterface FieldSettings {\n  direction: string\n  id: string\n  language: string\n  linkOptions: Option[]\n  locale: string\n  mediaOptions: Option[]\n  transforms: string[]\n}\n\ninterface ElementEditor {\n  isFullPage: boolean\n}\n\ninterface Element {\n  id: string\n  label: string\n  url: string\n}\n\n// Because TinyMCE's Editor export doesn't declare addButton ¯\\_(ツ)_/¯\ninterface FieldEditor extends Editor {\n  addButton: (command: string, settings: object) => void\n}\n\nconst showModalFactory: (elementType: string, settings: object) => Function = (elementType, settings = {}) => {\n  let modal: GarnishModal|undefined\n\n  return () => {\n    if (typeof modal === 'undefined') {\n      modal = Craft.createElementSelectorModal(elementType, Object.assign({\n        resizable: true,\n        multiSelect: false,\n        disableOnSelect: true\n      }, settings))\n    } else {\n      modal.show()\n    }\n  }\n}\n\nclass TinyMCEField {\n  constructor (\n    private readonly _settings: FieldSettings,\n    editorConfig: RawEditorOptions = {}\n  ) {\n    console.log(this._settings)\n    const init = this._init.bind(this)\n    const setup = this._setup.bind(this)\n\n    const options = Object.assign(\n      {\n        plugins: 'autoresize lists link image code',\n        content_css: false,\n\n        // Toolbars\n        menubar: false,\n        statusbar: false,\n        toolbar: 'undo redo | blocks | bold italic strikethrough | bullist numlist | link entryLink assetLink | image assetMedia | hr | code',\n\n        // Formatting\n        allow_conditional_comments: false,\n        element_format: 'html',\n        fix_list_elements: true,\n\n        // Links\n        relative_urls: false,\n        remove_script_host: false,\n        anchor_top: false,\n        anchor_bottom: false,\n\n        // Auto-resize\n        autoresize_bottom_margin: 0\n      },\n      editorConfig,\n      {\n        selector: `#${this._settings.id}`,\n        language: this._settings.language,\n        directionality: this._settings.direction,\n\n        setup,\n\n        init_instance_callback (editor: FieldEditor) {\n          init(editor)\n\n          const configInit = editorConfig.init_instance_callback\n          if (typeof configInit === 'function') {\n            configInit.apply(this, arguments)\n          }\n        }\n      }\n    )\n\n    tinymce.init(options).then(() => {}, () => {})\n  }\n\n  private _setup (editor: FieldEditor): void {\n    for (const { elementType, optionTitle, sources } of this._settings.linkOptions) {\n      const elementTypeHandle = elementType.replace(/^\\w|_\\w/g, (match: string) => match.toLowerCase())\n      const command = `${elementTypeHandle}Link`\n\n      const showModal = showModalFactory(elementType, {\n        sources,\n        criteria: { locale: this._settings.locale },\n        onSelect ([element]: [Element]) {\n          const selectedContent = editor.selection.getContent()\n\n          const url = `${element.url}#${elementTypeHandle}:${element.id}`\n          const title = element.label\n          const label = (selectedContent ?? element.label)\n          const command = selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n\n          editor.execCommand(command, false, `<a href=\"${url}\" title=\"${title}\">${label}</a>`)\n        }\n      })\n\n      editor.addButton(command, {\n        icon: 'link',\n        storageKey: 'tinymce.' + command,\n        tooltip: optionTitle,\n        onclick: () => showModal()\n      })\n    }\n\n    for (const { elementType, optionTitle, sources } of this._settings.mediaOptions) {\n      const elementTypeHandle = elementType.replace(/^\\w|_\\w/g, (match) => match.toLowerCase())\n      const command = `${elementTypeHandle}Media`\n\n      const showModal = showModalFactory(elementType, {\n        sources,\n        transforms: this._settings.transforms,\n        storageKey: 'RichTextFieldType.ChooseImage',\n        criteria: {\n          locale: this._settings.locale,\n          kind: 'image'\n        },\n        onSelect: ([element]: [Element], transform: string|null = null) => {\n          const selectedContent = editor.selection.getContent()\n\n          const url = `${element.url}#${elementTypeHandle}:${element.id}` + (transform !== null ? `:${transform}` : '')\n          const title = element.label\n          const width = ''\n          const height = ''\n          const command = selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n\n          editor.execCommand(command, false, `<img src=\"${url}\" alt=\"${title}\" width=\"${width}\" height=\"${height}\">`)\n        }\n      })\n\n      editor.addButton(command, {\n        icon: 'image',\n        storageKey: 'tinymce.' + command,\n        tooltip: optionTitle,\n        onclick: () => showModal()\n      })\n    }\n  }\n\n  private _init (editor: FieldEditor): void {\n    const $element = $(editor.container)\n    const $form = $(editor.formElement)\n\n    editor.on('focus', (_: EditorEvent<any>) => $element.addClass('mce-focused'))\n    editor.on('blur', (_: EditorEvent<any>) => $element.removeClass('mce-focused'))\n\n    const elementEditor: ElementEditor = $form.data('elementEditor')\n    const contentObserver = new window.MutationObserver(() => {\n      $(editor.targetElm).val(editor.getContent())\n      const $target = elementEditor.isFullPage ? Garnish.$bod : $form\n      $target.trigger('change')\n    })\n    contentObserver.observe(editor.getBody(), {\n      characterData: true,\n      childList: true,\n      subtree: true\n    })\n  }\n}\n\nexport { FieldSettings, TinyMCEField }\n","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FieldSettings, TinyMCEField } from './TinyMCEField'\n\ndeclare global {\n  interface Window {\n    initTinyMCE: (settings: FieldSettings) => void\n  }\n}\n\nwindow.initTinyMCE = (settings) => new TinyMCEField(settings)\n"],"names":["showModalFactory","elementType","settings","modal","Craft","createElementSelectorModal","Object","assign","resizable","multiSelect","disableOnSelect","show","TinyMCEField","constructor","_settings","editorConfig","console","log","this","init","_init","bind","setup","_setup","options","plugins","content_css","menubar","statusbar","toolbar","allow_conditional_comments","element_format","fix_list_elements","relative_urls","remove_script_host","anchor_top","anchor_bottom","autoresize_bottom_margin","selector","id","language","directionality","direction","init_instance_callback","editor","configInit","apply","arguments","tinymce","then","optionTitle","sources","linkOptions","elementTypeHandle","replace","match","toLowerCase","command","showModal","criteria","locale","onSelect","element","selectedContent","selection","getContent","url","title","label","length","execCommand","addButton","icon","storageKey","tooltip","onclick","mediaOptions","transforms","kind","transform","$element","$","container","$form","formElement","on","_","addClass","removeClass","elementEditor","data","window","MutationObserver","targetElm","val","isFullPage","Garnish","$bod","trigger","observe","getBody","characterData","childList","subtree","module","exports","jQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","initTinyMCE"],"sourceRoot":""}